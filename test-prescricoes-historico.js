import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3002/api';

async function testarPrescricoesEHistorico() {
  console.log('üíä Testando sistema de prescri√ß√µes digitais e hist√≥rico m√©dico...');
  
  try {
    // 1. Fazer login como paciente para criar consulta
    console.log('üîê Fazendo login como paciente para criar consulta...');
    const loginPacienteResponse = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'paciente@teste.com',
        password: '123456'
      })
    });
    
    const loginPacienteData = await loginPacienteResponse.json();
    console.log('üîê Login paciente realizado:', loginPacienteData.success);
    
    if (!loginPacienteData.success) {
      console.error('‚ùå Erro no login do paciente:', loginPacienteData.error);
      return;
    }
    
    const tokenPaciente = loginPacienteData.token;
    const headersPaciente = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${tokenPaciente}`
    };
    
    // 2. Fazer login como m√©dico para prescri√ß√µes
    console.log('üîê Fazendo login como m√©dico...');
    const loginResponse = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'medico@teste.com',
        password: '123456'
      })
    });
    
    const loginData = await loginResponse.json();
    console.log('üîê Login m√©dico realizado:', loginData.success);
    
    if (!loginData.success) {
      console.error('‚ùå Erro no login do m√©dico:', loginData.error);
      return;
    }
    
    const token = loginData.token;
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };

    // 2. Testar listagem de prescri√ß√µes
    console.log('\n1Ô∏è‚É£ Testando listagem de prescri√ß√µes...');
    const prescricoesResponse = await fetch(`${API_BASE}/prescricoes`, {
      headers
    });
    const prescricoes = await prescricoesResponse.json();
    console.log('üíä Prescri√ß√µes encontradas:', prescricoes);

    // 3. Testar cria√ß√£o de prescri√ß√£o (como m√©dico)
    console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de prescri√ß√£o...');
    
    // Primeiro vamos criar uma consulta fict√≠cia para teste (como paciente)
      const consultaFicticia = {
        medico_id: '7e951e2b-4a41-48f3-ba0c-73a07dcd197c', // ID do m√©dico
        data_hora: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Amanh√£
        especialidade: 'Cl√≠nica Geral',
        observacoes: 'Consulta de teste para prescri√ß√£o',
        valor: 150.00
      };
     
     const consultaResponse = await fetch(`${API_BASE}/consultas`, {
       method: 'POST',
       headers: headersPaciente, // Usar token do paciente
       body: JSON.stringify(consultaFicticia)
     });
    const consultaCriada = await consultaResponse.json();
    console.log('üìÖ Consulta criada:', consultaCriada.success ? 'Sucesso' : consultaCriada.error);
    
    let consultaId;
    if (consultaCriada.success && consultaCriada.consulta) {
      consultaId = consultaCriada.consulta.id;
      
      // Atualizar status da consulta para 'em_andamento' para permitir prescri√ß√µes
      const updateResponse = await fetch(`${API_BASE}/consultas/${consultaId}`, {
        method: 'PUT',
        headers: headers,
        body: JSON.stringify({ status: 'em_andamento' })
      });
      
      const updateResult = await updateResponse.json();
      console.log('üîÑ Status da consulta atualizado:', updateResult.success ? 'Sucesso' : updateResult.error || 'Erro');
    } else {
      consultaId = 'consulta-ficticia-123'; // Fallback para teste
    }
    
    const novaPrescricao = {
      consulta_id: consultaId,
      medicamentos: [
        {
          nome: 'Paracetamol 500mg',
          dosagem: '1 comprimido',
          frequencia: 'A cada 8 horas',
          duracao: '7 dias',
          observacoes: 'Tomar ap√≥s as refei√ß√µes'
        }
      ],
      orientacoes: 'Prescri√ß√£o de teste via API - tomar com √°gua'
    };
    
    const criarPrescricaoResponse = await fetch(`${API_BASE}/prescricoes`, {
      method: 'POST',
      headers,
      body: JSON.stringify(novaPrescricao)
    });
    const prescricaoCriada = await criarPrescricaoResponse.json();
    console.log('‚úÖ Prescri√ß√£o criada:', prescricaoCriada);

    // 4. Testar hist√≥rico m√©dico do paciente
    console.log('\n3Ô∏è‚É£ Testando hist√≥rico m√©dico...');
    const historicoResponse = await fetch(`${API_BASE}/historico-medico/paciente/46ff8a39-df54-449d-9ad5-1e0dc0ffe452`, {
      headers
    });
    const historico = await historicoResponse.json();
    console.log('üìã Hist√≥rico m√©dico:', historico);

    // 5. Testar cria√ß√£o de entrada no hist√≥rico
    console.log('\n4Ô∏è‚É£ Testando cria√ß√£o de entrada no hist√≥rico...');
    const novaEntrada = {
      paciente_id: '46ff8a39-df54-449d-9ad5-1e0dc0ffe452',
      tipo: 'consulta',
      descricao: 'Consulta de rotina - Paciente apresenta sintomas leves de gripe',
      diagnostico: 'Resfriado comum',
      tratamento: 'Repouso e hidrata√ß√£o',
      observacoes: 'Retorno em 7 dias se sintomas persistirem'
    };
    
    const criarHistoricoResponse = await fetch(`${API_BASE}/historico-medico`, {
      method: 'POST',
      headers,
      body: JSON.stringify(novaEntrada)
    });
    const entradaCriada = await criarHistoricoResponse.json();
    console.log('‚úÖ Entrada no hist√≥rico criada:', entradaCriada);

    console.log('\n‚úÖ Teste de prescri√ß√µes e hist√≥rico conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testarPrescricoesEHistorico();